export declare class YTMUSIC {
    private cookie;
    private args?;
    userID?: string;
    authUser: number | undefined;
    constructor(cookie: string, args?: {
        userID: string;
        authUser?: number | undefined;
    } | undefined);
    /**
     * Returns First Part of HomePage
     *
     * @usage
     *
     * ```js
     *  const api = new YTMUSIC(cookie)
     *  const data = await api.getHomePage()
     * ```
     *
     * You can call `data.continue()` to get next part
     * @returns {@link HomePage}
     *
     */
    getHomePage: () => Promise<import("./models/HomePage").default>;
    getPlaylists: () => Promise<Error | import("./models/Playlist").default[]>;
    getPlaylist: (id: string, limit?: number | undefined) => Promise<import("./models/Playlist").default>;
    addToPlaylist: (ids: string[], playlistId: string) => Promise<{
        status: string;
        playlistName?: string | undefined;
        ids: string[];
        playlistId: string;
        error?: string | undefined;
    }>;
    /**
     * Returns Full HomePage
     *
     * @usage
     * ```js
     *  const api = new YTMUSIC(cookie)
     *  const data = await api.getFullHomePage()
     * ```
     * @returns {@link HomePage}
     *
     */
    getFullHomePage: () => Promise<import("./models/HomePage").default>;
    /**
     * Search
     *
     * @usage
     *
     * ```js
     *  const api = new YTMUSIC(cookie)
     *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
     *  const songs = await api.search('Hot stuff')
     *  await api.addToPlaylist([songs[0].id], playlist.id)
     * ```
     * @param query - Search query
     * @param filter - What type to search
     * @param max - maximum results (recommended 1-3, because next results might be unparsable) default: infinity
     *
     */
    search: (query: string, options?: {
        filter?: "songs" | "videos" | "albums" | "artists" | "playlists" | undefined;
        max?: number | undefined;
    } | undefined) => Promise<Error | {
        [propName: string]: any;
        type: "video" | "song" | "album" | "playlist" | "artist";
        title: Text;
        url: string;
        tracksCount?: number | undefined;
        thumbnails: import("./models/Thumbnail").default[];
        author?: Text | undefined;
        id?: string | undefined;
        album?: Text | undefined;
    }[]>;
    /**
     * Create playlist
     *
     * @usage
     *
     * ```js
     *  const api = new YTMUSIC(cookie)
     *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
     *  await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], playlist.id)
     * ```
     * @param title - Title
     * @param privacyStatus - Privacy Status of playlist
     * @param description - Description of playlist
    ```
   */
    createPlaylist: (title: string, privacyStatus: 'PRIVATE' | 'PUBLIC' | 'UNLISTED', description?: string | undefined) => Promise<Error | {
        id: string;
    }>;
    /**
     * Delete playlist
     *
     * @usage
     *
     * ```js
     *  const api = new YTMUSIC(cookie)
     *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
     *  await api.deletePlaylist(playlist.id)
     * ```
     * @param id - id of the playlist
     */
    deletePlaylist: (id: string) => Promise<Error | {
        id: string;
    }>;
    /**
   * Remove song(s) from playlist
   *
   * @usage
   *
   * ```js
   *  const api = new YTMUSIC(cookie)
   *  const data = await api.removeFromPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
   * ```
   * @param ids - Array of song ids to remove
   * @param playlistId -  ID of playlist
  ```
   */
    removeFromPlaylist: (ids: string[], playlistId: string, setVideoId?: string | undefined) => Promise<Error | {
        status: string;
        playlistName?: string | undefined;
        ids: string[];
        playlistId: string;
    }>;
    getArtist: (channelId: string) => Promise<Error | import("./models/Artist").default>;
    /**
     * Get song info
     *
     * @usage
     *
     * ```js
     *  const api = new YTMUSIC(cookie)
     *  const song = await api.getSongInfo('https://music.youtube.com/watch?v=DPXHMBKY39M&feature=share')
     *  console.log(song.title)
     * ```
     * @param url - Search query
     *
     */
    getSongInfo: (url: string) => Promise<import("./models/Song").Song>;
}
