"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YTMUSIC = void 0;
var HomePage = __importStar(require("./lib/endpoints/HomePage"));
var Playlist = __importStar(require("./lib/endpoints/Playlist"));
var Browsing = __importStar(require("./lib/endpoints/Browsing"));
var Browse = __importStar(require("./lib/endpoints/Browse"));
var Search_1 = require("./lib/endpoints/Search");
var Player_1 = require("./lib/endpoints/Player");
var utils_1 = require("./lib/utils");
var YTMUSIC = /** @class */ (function () {
    function YTMUSIC(cookie, args) {
        var _this = this;
        this.cookie = cookie;
        this.args = args;
        /**
         * Returns First Part of HomePage
         *
         * @usage
         *
         * ```js
         *  const api = new YTMUSIC(cookie)
         *  const data = await api.getHomePage()
         * ```
         *
         * You can call `data.continue()` to get next part
         * @returns {@link HomePage}
         *
         */
        this.getHomePage = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, HomePage.getHomePage(this.cookie, this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.getPlaylists = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Browse.getPlaylists(this.cookie, this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.getPlaylist = function (id, limit) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Playlist.getPlaylist(this.cookie, this, id, limit)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); };
        this.addToPlaylist = function (ids, playlistId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Playlist.addToPlaylist(this.cookie, this, ids, playlistId)
                    /**
                     * Returns Full HomePage
                     *
                     * @usage
                     * ```js
                     *  const api = new YTMUSIC(cookie)
                     *  const data = await api.getFullHomePage()
                     * ```
                     * @returns {@link HomePage}
                     *
                     */
                ];
                case 1: return [2 /*return*/, _a.sent()
                    /**
                     * Returns Full HomePage
                     *
                     * @usage
                     * ```js
                     *  const api = new YTMUSIC(cookie)
                     *  const data = await api.getFullHomePage()
                     * ```
                     * @returns {@link HomePage}
                     *
                     */
                ];
            }
        }); }); };
        /**
         * Returns Full HomePage
         *
         * @usage
         * ```js
         *  const api = new YTMUSIC(cookie)
         *  const data = await api.getFullHomePage()
         * ```
         * @returns {@link HomePage}
         *
         */
        this.getFullHomePage = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, HomePage.getFullHomePage(this.cookie, this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        /**
         * Search
         *
         * @usage
         *
         * ```js
         *  const api = new YTMUSIC(cookie)
         *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
         *  const songs = await api.search('Hot stuff')
         *  await api.addToPlaylist([songs[0].id], playlist.id)
         * ```
         * @param query - Search query
         * @param filter - What type to search
         * @param max - maximum results (recommended 1-3, because next results might be unparsable) default: infinity
         *
         */
        this.search = function (query, options) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Search_1.search(this.cookie, this, query, options)
                    /**
                     * Create playlist
                     *
                     * @usage
                     *
                     * ```js
                     *  const api = new YTMUSIC(cookie)
                     *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
                     *  await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], playlist.id)
                     * ```
                     * @param title - Title
                     * @param privacyStatus - Privacy Status of playlist
                     * @param description - Description of playlist
                    ```
                   */
                ];
                case 1: return [2 /*return*/, _a.sent()
                    /**
                     * Create playlist
                     *
                     * @usage
                     *
                     * ```js
                     *  const api = new YTMUSIC(cookie)
                     *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
                     *  await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], playlist.id)
                     * ```
                     * @param title - Title
                     * @param privacyStatus - Privacy Status of playlist
                     * @param description - Description of playlist
                    ```
                   */
                ];
            }
        }); }); };
        /**
         * Create playlist
         *
         * @usage
         *
         * ```js
         *  const api = new YTMUSIC(cookie)
         *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
         *  await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], playlist.id)
         * ```
         * @param title - Title
         * @param privacyStatus - Privacy Status of playlist
         * @param description - Description of playlist
        ```
       */
        this.createPlaylist = function (title, privacyStatus, description) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Playlist.createPlaylist(this.cookie, this, title, privacyStatus, description)
                        /**
                         * Delete playlist
                         *
                         * @usage
                         *
                         * ```js
                         *  const api = new YTMUSIC(cookie)
                         *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
                         *  await api.deletePlaylist(playlist.id)
                         * ```
                         * @param id - id of the playlist
                         */
                    ];
                    case 1: return [2 /*return*/, _a.sent()
                        /**
                         * Delete playlist
                         *
                         * @usage
                         *
                         * ```js
                         *  const api = new YTMUSIC(cookie)
                         *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
                         *  await api.deletePlaylist(playlist.id)
                         * ```
                         * @param id - id of the playlist
                         */
                    ];
                }
            });
        }); };
        /**
         * Delete playlist
         *
         * @usage
         *
         * ```js
         *  const api = new YTMUSIC(cookie)
         *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
         *  await api.deletePlaylist(playlist.id)
         * ```
         * @param id - id of the playlist
         */
        this.deletePlaylist = function (id) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Playlist.deletePlaylist(this.cookie, this, id)
                    /**
                   * Remove song(s) from playlist
                   *
                   * @usage
                   *
                   * ```js
                   *  const api = new YTMUSIC(cookie)
                   *  const data = await api.removeFromPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
                   * ```
                   * @param ids - Array of song ids to remove
                   * @param playlistId -  ID of playlist
                  ```
                   */
                ];
                case 1: return [2 /*return*/, _a.sent()
                    /**
                   * Remove song(s) from playlist
                   *
                   * @usage
                   *
                   * ```js
                   *  const api = new YTMUSIC(cookie)
                   *  const data = await api.removeFromPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
                   * ```
                   * @param ids - Array of song ids to remove
                   * @param playlistId -  ID of playlist
                  ```
                   */
                ];
            }
        }); }); };
        /**
       * Remove song(s) from playlist
       *
       * @usage
       *
       * ```js
       *  const api = new YTMUSIC(cookie)
       *  const data = await api.removeFromPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
       * ```
       * @param ids - Array of song ids to remove
       * @param playlistId -  ID of playlist
      ```
       */
        this.removeFromPlaylist = function (ids, playlistId, setVideoId) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Playlist.removeFromPlaylist(this.cookie, this, ids, playlistId, setVideoId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.getArtist = function (channelId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, Browsing.getArtist(this.cookie, this, channelId)
                /**
                 * Get song info
                 *
                 * @usage
                 *
                 * ```js
                 *  const api = new YTMUSIC(cookie)
                 *  const song = await api.getSongInfo('https://music.youtube.com/watch?v=DPXHMBKY39M&feature=share')
                 *  console.log(song.title)
                 * ```
                 * @param url - Search query
                 *
                 */
            ];
        }); }); };
        /**
         * Get song info
         *
         * @usage
         *
         * ```js
         *  const api = new YTMUSIC(cookie)
         *  const song = await api.getSongInfo('https://music.youtube.com/watch?v=DPXHMBKY39M&feature=share')
         *  console.log(song.title)
         * ```
         * @param url - Search query
         *
         */
        this.getSongInfo = function (url) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Player_1.Player(this.cookie, this, utils_1.getURLVideoID(url))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); };
        this.cookie = cookie;
        if (args === null || args === void 0 ? void 0 : args.userID) {
            this.userID = args.userID;
        }
        if (args === null || args === void 0 ? void 0 : args.authUser) {
            this.authUser = args.authUser;
        }
    }
    return YTMUSIC;
}());
exports.YTMUSIC = YTMUSIC;
