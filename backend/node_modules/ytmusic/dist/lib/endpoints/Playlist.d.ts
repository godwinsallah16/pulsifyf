import Playlist from '../../models/Playlist';
/**
 * Returns Playlist Info
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.getPlaylist('RDAMVM5hFevwJ4JXI')
 * ```
 * @param id - playlist ID
 * @returns {@link Playlist}
 *
 */
export declare const getPlaylist: (cookie: string, args: {
    userID?: string;
    authUser?: number;
}, id: string, limit?: number | undefined) => Promise<Playlist>;
/**
 * Add song(s) to playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
 * ```
 * @param ids - Array of song ids to add
 * @param playlistId -  ID of playlist
 * @returns ```js
 * {
    status: string
    playlistName?: string
    ids: string[]
    playlistId: string
}
```
 */
export declare const addToPlaylist: (cookie: string, args: {
    userID?: string;
    authUser?: number;
}, ids: string[], playlistId: string) => Promise<{
    status: string;
    playlistName?: string | undefined;
    ids: string[];
    playlistId: string;
    error?: string | undefined;
}>;
/**
 * Create playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
 *  await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], playlist.id)
 * ```
 * @param title - Title
 * @param privacyStatus - Privacy Status of playlist
 * @param description - Description of playlist
 */
export declare const createPlaylist: (cookie: string, args: {
    userID?: string;
    authUser?: number;
}, title: string, privacyStatus: 'PRIVATE' | 'PUBLIC' | 'UNLISTED', description?: string | undefined) => Promise<{
    id: string;
} | Error>;
/**
 * Delete playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
 *  await api.deletePlaylist(playlist.id)
 * ```
 * @param id - id of the playlist
 */
export declare const deletePlaylist: (cookie: string, args: {
    userID?: string;
    authUser?: number;
}, id: string) => Promise<Error | {
    id: string;
}>;
/**
 * Remove song(s) from playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.removeFromPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
 * ```
 * @param ids - Array of song ids to remove
 * @param playlistId -  ID of playlist
```
 */
export declare const removeFromPlaylist: (cookie: string, args: {
    userID?: string;
    authUser?: number;
}, ids: string[], playlistId: string, setVideoId?: string | undefined) => Promise<Error | {
    status: string;
    playlistName?: string | undefined;
    ids: string[];
    playlistId: string;
}>;
