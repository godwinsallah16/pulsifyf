"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = void 0;
var utils = __importStar(require("../utils"));
/**
 * Search
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
 *  const songs = await api.search('Hot stuff')
 *  await api.addToPlaylist([songs[0].id], playlist.id)
 * ```
 * @param query - Search query
 * @param filter - What type to search
 * @param max - maximum results (recommended 1-3, because next results might be unparsable) default: infinity
 *
 */
exports.search = function (cookie, args, query, options) { return __awaiter(void 0, void 0, void 0, function () {
    var body, param, response, contents, results;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                body = utils.generateBody({ userID: args.userID });
                if (options === null || options === void 0 ? void 0 : options.filter) {
                    param = void 0;
                    switch (options.filter) {
                        case 'songs':
                            param = 'RAAGAAgACgA';
                        case 'videos':
                            param = 'BABGAAgACgA';
                        case 'albums':
                            param = 'BAAGAEgACgA';
                        case 'artists':
                            param = 'BAAGAAgASgA';
                        case 'playlists':
                            param = 'BAAGAAgACgB';
                        default:
                            param = 'RAAGAAgACgA';
                    }
                    body.params = "Eg-KAQwIA" + param + "'MABqChAEEAMQCRAFEAo%3D'";
                }
                body.query = query;
                return [4 /*yield*/, utils.sendRequest(cookie, {
                        endpoint: 'search',
                        userID: args.userID,
                        authUser: args.authUser,
                        body: body
                    })];
            case 1:
                response = _a.sent();
                if (response.error)
                    throw new Error(response.error.status);
                contents = response.contents.tabbedSearchResultsRenderer.tabs[0].tabRenderer.content
                    .sectionListRenderer.contents;
                results = [];
                if (contents[0].messageRenderer)
                    return [2 /*return*/, []];
                contents.map(function (ctx) {
                    if (ctx.itemSectionRenderer)
                        return;
                    ctx = ctx.musicShelfRenderer;
                    ctx.contents.map(function (e, i) {
                        if ((options === null || options === void 0 ? void 0 : options.max) && i > (options === null || options === void 0 ? void 0 : options.max) - 1)
                            return;
                        try {
                            e = e.musicResponsiveListItemRenderer;
                            var type = void 0;
                            if (options === null || options === void 0 ? void 0 : options.filter)
                                type = options.filter.slice(0, options.filter.length - 1);
                            else
                                type = ctx.title.runs[0].text
                                    .toLowerCase()
                                    .slice(0, ctx.title.runs[0].text.length - 1);
                            if (type === 'top resul') {
                                type =
                                    e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[0].text.toLowerCase();
                            }
                            if (!['user playlist', 'song', 'video', 'artist'].includes(type))
                                type = 'album';
                            // if (!options.filter) e.flexColumns.splice(1, 1)
                            var result = {
                                type: type,
                                title: e.flexColumns[0].musicResponsiveListItemFlexColumnRenderer.text
                                    .runs[0].text,
                                thumbnails: e.thumbnail.musicThumbnailRenderer.thumbnail.thumbnails
                            };
                            type = type.toLowerCase();
                            if (['user playlist', 'song', 'video', 'album'].includes(type)) {
                                result.author =
                                    e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[2].text;
                                if (type === 'song') {
                                    if (e.playlistItemData) {
                                        result.url = "https://music.youtube.com/watch?v=" + e.playlistItemData.videoId + "&list=" + e.overlay.musicItemThumbnailOverlayRenderer.content.musicPlayButtonRenderer.playNavigationEndpoint.watchEndpoint.playlistId;
                                        result.id = e.playlistItemData.videoId;
                                    }
                                    result.album =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[4].text;
                                    result.album_browse_id =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[4].navigationEndpoint.browseEndpoint.browseId;
                                    result.duration =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[6].text;
                                    result.artist_browse_id =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[2].navigationEndpoint.browseEndpoint.browseId;
                                }
                                if (type === 'video') {
                                    if (e.playlistItemData) {
                                        result.url = "https://music.youtube.com/watch?v=" + e.playlistItemData.videoId + "&list=" + e.overlay.musicItemThumbnailOverlayRenderer.content.musicPlayButtonRenderer.playNavigationEndpoint.watchEndpoint.playlistId;
                                        result.id = e.playlistItemData.videoId;
                                    }
                                    result.views =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[4].text;
                                    result.duration =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[6].text;
                                }
                                if (type === 'user playlist') {
                                    result.type = 'playlist';
                                    result.url = "https://music.youtube.com/playlist?list=" + e.navigationEndpoint.browseEndpoint.browseId;
                                    result.tracksCount = parseInt(e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text
                                        .runs[4].text);
                                    result.id = e.navigationEndpoint.browseEndpoint.browseId.slice(2);
                                }
                                if (type === 'album') {
                                    result.url = "https://music.youtube.com/browse/" + e.navigationEndpoint.browseEndpoint.browseId;
                                    result.year =
                                        e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[4].text;
                                }
                            }
                            else {
                                result.subs =
                                    e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs[0].text;
                                result.url = "https://music.youtube.com/browse/" + e.navigationEndpoint.browseEndpoint.browseId;
                            }
                            results.push(result);
                        }
                        catch (e) {
                            console.log(e);
                            return;
                        }
                    });
                });
                return [2 /*return*/, results];
        }
    });
}); };
