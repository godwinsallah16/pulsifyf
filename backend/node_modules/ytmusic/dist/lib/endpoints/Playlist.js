"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeFromPlaylist = exports.deletePlaylist = exports.createPlaylist = exports.addToPlaylist = exports.getPlaylist = void 0;
var continuations_1 = require("../continuations");
var utils = __importStar(require("../utils"));
var parsePlaylist = utils.parser(function (response, playlistId) {
    var header = response.header.musicDetailHeaderRenderer
        ? response.header.musicDetailHeaderRenderer
        : response.header.musicEditablePlaylistDetailHeaderRenderer.header
            .musicDetailHeaderRenderer;
    var playlist = {
        title: header.title.runs[0],
        thumbnail: header.thumbnail.croppedSquareThumbnailRenderer.thumbnail.thumbnails,
        playlistId: playlistId,
        content: [],
        subtitle: header.subtitle.runs,
        secondSubtitle: header.secondSubtitle.runs
    };
    return playlist;
});
var parseSong = utils.parser(function (e, playlistId) {
    var _a, _b, _c;
    var primaryTextRun = e.flexColumns[0].musicResponsiveListItemFlexColumnRenderer.text.runs[0];
    var id = (_b = (_a = primaryTextRun === null || primaryTextRun === void 0 ? void 0 : primaryTextRun.navigationEndpoint) === null || _a === void 0 ? void 0 : _a.watchEndpoint) === null || _b === void 0 ? void 0 : _b.videoId;
    if (!id) {
        // NOTE: It is apparently possible to have items that don't have an ID!
        // The Web UI renders them as disabled, and the only available action is to
        // remove them from the playlist. For now, we will wimply omit them from
        // results, since having an optional ID would be quite a breaking change
        return;
    }
    return {
        id: id,
        duration: e.fixedColumns[0].musicResponsiveListItemFixedColumnRenderer.text.runs[0]
            .text,
        thumbnail: e.thumbnail.musicThumbnailRenderer.thumbnail.thumbnails,
        title: primaryTextRun,
        author: e.flexColumns[1].musicResponsiveListItemFlexColumnRenderer.text.runs,
        album: (_c = e.flexColumns[2].musicResponsiveListItemFlexColumnRenderer.text.runs) === null || _c === void 0 ? void 0 : _c[0],
        url: "https://music.youtube.com/watch?v=" + id + "&list=" + playlistId
    };
});
var parsePlaylistContents = utils.parser(function (contents, playlistId, limit) {
    var content = [];
    for (var i = 0; i < contents.length; ++i) {
        var e = contents[i].musicResponsiveListItemRenderer;
        if (limit && i > limit - 1)
            break;
        var song = parseSong(e, playlistId);
        if (song) {
            content.push(song);
        }
    }
    return content;
});
/**
 * Returns Playlist Info
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.getPlaylist('RDAMVM5hFevwJ4JXI')
 * ```
 * @param id - playlist ID
 * @returns {@link Playlist}
 *
 */
exports.getPlaylist = function (cookie, args, id, limit) { return __awaiter(void 0, void 0, void 0, function () {
    var response, playlist, data, remainingLimit;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, utils.sendRequest(cookie, {
                    id: id.startsWith('VL') ? id : "VL" + id,
                    type: 'PLAYLIST',
                    endpoint: 'browse',
                    authUser: args.authUser
                })];
            case 1:
                response = _a.sent();
                playlist = parsePlaylist(response, id);
                playlist.playlistId = id;
                data = response.contents.singleColumnBrowseResultsRenderer.tabs[0].tabRenderer
                    .content.sectionListRenderer.contents[0].musicPlaylistShelfRenderer;
                if (!data.contents)
                    return [2 /*return*/, playlist];
                playlist.content = parsePlaylistContents(data.contents, id, limit);
                if (data.contents[0].playlistItemData) {
                    playlist.setVideoId = data.contents[0].playlistItemData.playlistSetVideoId;
                }
                remainingLimit = limit ? limit - playlist.content.length : undefined;
                if (remainingLimit == null || remainingLimit > 0) {
                    playlist.continue = continuations_1.createContinuation(cookie, args, function (contents) { return parsePlaylistContents(contents, id, remainingLimit); }, playlist, data);
                }
                return [2 /*return*/, playlist];
        }
    });
}); };
/**
 * Add song(s) to playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
 * ```
 * @param ids - Array of song ids to add
 * @param playlistId -  ID of playlist
 * @returns ```js
 * {
    status: string
    playlistName?: string
    ids: string[]
    playlistId: string
}
```
 */
exports.addToPlaylist = function (cookie, args, ids, playlistId) { return __awaiter(void 0, void 0, void 0, function () {
    var body, ids_1, ids_1_1, id, response;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!playlistId)
                    throw new Error('You must specify playlist id');
                body = utils.generateBody({ userID: args.userID });
                body.playlistId = playlistId;
                if (args.userID)
                    body.context.user.onBehalfOfUser = args.userID;
                body.actions = [];
                try {
                    for (ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                        id = ids_1_1.value;
                        body.actions.push({ action: 'ACTION_ADD_VIDEO', addedVideoId: id });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [4 /*yield*/, utils.sendRequest(cookie, {
                        body: body,
                        authUser: args.authUser,
                        endpoint: 'browse/edit_playlist'
                    })];
            case 1:
                response = _b.sent();
                if (response.actions[0].openPopupAction) {
                    return [2 /*return*/, {
                            status: response.status,
                            playlistName: response.actions[0].openPopupAction.popup.notificationActionRenderer
                                .responseText.runs[1].text,
                            ids: ids,
                            playlistId: playlistId
                        }];
                }
                else {
                    return [2 /*return*/, {
                            status: response.status,
                            error: response.actions[0].addToToastAction.item.notificationActionRenderer
                                .responseText.runs[0].text,
                            ids: ids,
                            playlistId: playlistId
                        }];
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Create playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
 *  await api.addToPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], playlist.id)
 * ```
 * @param title - Title
 * @param privacyStatus - Privacy Status of playlist
 * @param description - Description of playlist
 */
exports.createPlaylist = function (cookie, args, title, privacyStatus, description) { return __awaiter(void 0, void 0, void 0, function () {
    var body, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!description)
                    description = '';
                if (!['PRIVATE', 'PUBLIC', 'UNLISTED'].includes(privacyStatus))
                    throw new Error('Unknown privacyStatus');
                if (!title)
                    throw new Error('Title cannot be empty');
                body = utils.generateBody({
                    userID: args.userID
                });
                body.title = title;
                body.description = description;
                body.privacyStatus = privacyStatus;
                return [4 /*yield*/, utils.sendRequest(cookie, {
                        body: body,
                        authUser: args.authUser,
                        endpoint: 'playlist/create'
                    })];
            case 1:
                response = _a.sent();
                if (response.error)
                    throw new Error(response.error.status);
                return [2 /*return*/, {
                        id: response.playlistId
                    }];
        }
    });
}); };
/**
 * Delete playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.createPlaylist('Summer Songs', 'PUBLIC', 'Some songs for summer')
 *  await api.deletePlaylist(playlist.id)
 * ```
 * @param id - id of the playlist
 */
exports.deletePlaylist = function (cookie, args, id) { return __awaiter(void 0, void 0, void 0, function () {
    var body, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!id)
                    throw new Error('You must specify playlist id');
                body = utils.generateBody({
                    userID: args.userID
                });
                body.playlistId = id;
                return [4 /*yield*/, utils.sendRequest(cookie, {
                        body: body,
                        authUser: args.authUser,
                        endpoint: 'playlist/delete'
                    })];
            case 1:
                response = _a.sent();
                if (response.error)
                    throw new Error(response.error.status);
                return [2 /*return*/, {
                        id: id
                    }];
        }
    });
}); };
/**
 * Remove song(s) from playlist
 *
 * @usage
 *
 * ```js
 *  const api = new YTMUSIC(cookie)
 *  const data = await api.removeFromPlaylist(['-mLpe7KUg9U', '5hFevwJ4JXI'], 'RDAMVM5hFevwJ4JXI')
 * ```
 * @param ids - Array of song ids to remove
 * @param playlistId -  ID of playlist
```
 */
exports.removeFromPlaylist = function (cookie, args, ids, playlistId, setVideoId) { return __awaiter(void 0, void 0, void 0, function () {
    var pl, body, ids_2, ids_2_1, id, response;
    var e_2, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!playlistId) {
                    throw new Error('You must specify playlist id');
                }
                if (!!setVideoId) return [3 /*break*/, 2];
                return [4 /*yield*/, exports.getPlaylist(cookie, args, playlistId, 1)];
            case 1:
                pl = _b.sent();
                if (!pl.setVideoId)
                    throw new Error("You don't own this playlist");
                setVideoId = pl.setVideoId;
                _b.label = 2;
            case 2:
                body = utils.generateBody({ userID: args.userID });
                body.playlistId = playlistId;
                if (args.userID)
                    body.context.user.onBehalfOfUser = args.userID;
                body.actions = [];
                try {
                    for (ids_2 = __values(ids), ids_2_1 = ids_2.next(); !ids_2_1.done; ids_2_1 = ids_2.next()) {
                        id = ids_2_1.value;
                        body.actions.push({
                            action: 'ACTION_REMOVE_VIDEO',
                            removedVideoId: id,
                            setVideoId: setVideoId
                        });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (ids_2_1 && !ids_2_1.done && (_a = ids_2.return)) _a.call(ids_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return [4 /*yield*/, utils.sendRequest(cookie, {
                        body: body,
                        authUser: args.authUser,
                        endpoint: 'browse/edit_playlist'
                    })];
            case 3:
                response = _b.sent();
                return [2 /*return*/, {
                        status: response.status,
                        playlistName: response.actions[0].openPopupAction.popup.notificationActionRenderer
                            .responseText.runs[1].text,
                        ids: ids,
                        playlistId: playlistId
                    }];
        }
    });
}); };
