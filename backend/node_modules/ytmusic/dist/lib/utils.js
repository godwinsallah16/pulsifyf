"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getURLVideoID = exports.parser = exports.filterFlatMap = exports.filterMap = exports.sendRequest = exports.generateHeaders = exports.generateBody = void 0;
var cookie_1 = __importDefault(require("cookie"));
/**
 * @ignore
 */
var sha1 = require('sha1');
var node_fetch_1 = __importDefault(require("node-fetch"));
var context_json_1 = __importDefault(require("./context.json"));
var headers_json_1 = __importDefault(require("./headers.json"));
/**
 * @ignore
 */
var getSAPISID = function (raw) {
    var parsed = cookie_1.default.parse(raw);
    return parsed['SAPISID'];
};
/**
 * @ignore
 */
var getAuthToken = function (raw_cookie) {
    var date = new Date().getTime();
    return "SAPISIDHASH " + date + "_" + sha1(date + ' ' + getSAPISID(raw_cookie) + ' ' + 'https://music.youtube.com');
};
/**
 * @ignore
 */
exports.generateBody = function (args) {
    var context = context_json_1.default.context;
    if (args.userID)
        context.user.onBehalfOfUser = args.userID;
    if (args.type)
        return JSON.stringify({
            context: context,
            browseEndpointContextSupportedConfigs: {
                browseEndpointContextMusicConfig: {
                    pageType: 'MUSIC_PAGE_TYPE_' + args.type
                }
            },
            browseId: args.id
        });
    else if (args.id)
        return JSON.stringify({
            context: context,
            browseId: args.id
        });
    else
        return { context: context };
};
/**
 * @ignore
 */
exports.generateHeaders = function (cookie, authUser) {
    if (!cookie) {
        return headers_json_1.default;
    }
    var token = getAuthToken(cookie);
    if (!authUser)
        authUser = 0;
    return __assign(__assign({}, headers_json_1.default), { Authorization: token, 'X-Goog-AuthUser': "" + authUser, Cookie: cookie, 'x-youtube-client-version': '0.1' });
};
/**
 * @ignore
 */
exports.sendRequest = function (c, args) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, options, addParams;
    return __generator(this, function (_a) {
        headers = exports.generateHeaders(c, args.authUser);
        options = {
            method: 'POST',
            headers: headers,
            body: args.body
                ? JSON.stringify(args.body)
                : exports.generateBody({ id: args.id, type: args.type, userID: args.userID })
        };
        addParams = "" + (args.cToken
            ? 'ctoken=' +
                args.cToken +
                '&continuation=' +
                args.cToken +
                '&itct=' +
                args.itct +
                '&'
            : '');
        return [2 /*return*/, node_fetch_1.default("https://music.youtube.com/youtubei/v1/" + args.endpoint + "?" + addParams + "alt=json&key=AIzaSyC9XL3ZjWddXya6X74dJoCTL-WEYFDNX30", options)
                .then(function (data) { return data.json(); })
                .then(function (data) {
                return data;
            })];
    });
}); };
function filterMap(collection, f) {
    var e_1, _a;
    var result = [];
    try {
        for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {
            var item = collection_1_1.value;
            var mapped = f(item);
            if (mapped != null) {
                result.push(mapped);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.filterMap = filterMap;
function filterFlatMap(collection, f) {
    var e_2, _a;
    var result = [];
    try {
        for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {
            var item = collection_2_1.value;
            var mapped = f(item);
            if (mapped != null) {
                result.push.apply(result, __spread(mapped));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
}
exports.filterFlatMap = filterFlatMap;
/**
 * Wraps a function that accepts input T and parses it into output R.
 * In the normal case, this is a no-op; if the function throws, however,
 * we will augment the thrown Error with context bout what was being parsed.
 */
function parser(f) {
    return function parserWrapper() {
        var input = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            input[_i] = arguments[_i];
        }
        try {
            return f.apply(void 0, __spread(input));
        }
        catch (e) {
            throw new Error("Unexpected error: " + e.message + "\nParsing: " + JSON.stringify(input[0], null, 2) + "\n" + e.stack);
        }
    };
}
exports.parser = parser;
/**
 * Get video ID.
 *
 * There are a few type of video URL formats.
 *  - https://www.youtube.com/watch?v=VIDEO_ID
 *  - https://m.youtube.com/watch?v=VIDEO_ID
 *  - https://youtu.be/VIDEO_ID
 *  - https://www.youtube.com/v/VIDEO_ID
 *  - https://www.youtube.com/embed/VIDEO_ID
 *  - https://music.youtube.com/watch?v=VIDEO_ID
 *  - https://gaming.youtube.com/watch?v=VIDEO_ID
 *
 * Credit: https://github.com/fent/node-ytdl-core/blob/master/lib/url-utils.js
 * @param {string} link
 * @return {string}
 * @throws {Error} If unable to find a id
 * @throws {TypeError} If videoid doesn't match specs
 */
var validQueryDomains = new Set([
    'youtube.com',
    'www.youtube.com',
    'm.youtube.com',
    'music.youtube.com',
    'gaming.youtube.com'
]);
var validPathDomains = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts)\/)/;
exports.getURLVideoID = function (link) {
    var parsed = new URL(link.trim());
    var id = parsed.searchParams.get('v');
    if (validPathDomains.test(link.trim()) && !id) {
        var paths = parsed.pathname.split('/');
        id = parsed.host === 'youtu.be' ? paths[1] : paths[2];
    }
    else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {
        throw Error('Not a YouTube domain');
    }
    if (!id) {
        throw Error("No video id found: \"" + link + "\"");
    }
    id = id.substring(0, 11);
    return id;
};
